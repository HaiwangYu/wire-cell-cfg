#+TITLE: Configuration for Noise-Filtering and 2D and L1 Signal Processing for MicroBooNE

* Overview

This directory holds the Wire-Cell Toolkit (WCT) and art/LArSoft (LS)
configuration files for a MicroBooNE data processing job which applies
WCT noise filtering (NF) and signal processing (SP) including the L1SP
required to handle signals from the shorted wire regions.  The basic
NF+SP pipeline is:

1) read ~raw::RawDigit~ from ~art::Event~
2) apply TPC channel noise filtering 
3) apply filtering of PMT induced signals on TPC channels
4) integer-truncate samples and save to ~raw::RawDigit~
5) apply nominal 2D deconvolution signal processing (SP) 
6) apply special "L1SP" to select channels
7) write out final waveforms to ~art::Event~ as (sparse) ~recob::Wire~ collection

Step 2 requires a so-called "channel noise DB object" (chndb).  But,
in fact, the job will configure multiple chndb objects in order to
cover multiple run periods, specifically before/after hardware fix for
the excess coherent noise.  In the [[../nfsp/][previous config]] switching between
these two configuration "epochs" was a run-time determination.  The
powers that be in MicroBooNE now want it to be hard-coded into the
job.  The request was to hard-code it in the C++ but instead it is
hard-coded in the user configuration by mapping each epoch to its own,
particularly configured chndb.

* Usage

This directory is self contained except for the general Jsonnet support provided at top level of the ~wire-cell-cfg~ directory (eg, [[../../wirecell.jsonnet][wirecell.jsonnet]] and [[../../vector.jsonnet][vector.jsonnet]].  

Main entry points:

- [[./uboone-nfspl1.fcl]] :: FHiCL file that runs the three module pipeline and which may be used as an example for some other context.
- [[./uboone-nfspl1.jsonnet]] :: Jsonnet file referenced by the FHiCL configuration of the WireCellToolkit module that runs NF+SP.


* Parameters

The configuration has a large number of high-level parameters which
are managed inside [[./params.jsonnet]] and used elsewhere.  The Jsonnet
~std.extVar()~ mechanism allows arbitrary parts of the its object to
be overridden by the user by specifying an external variable called
~override~ at the ~wire-cell~ CLI or art/FHiCL file.
With the WCT CLI one may do like:

#+BEGIN_EXAMPLE
  $ wire-cell -V override={answer:42, foo:"bar"}' [...]
#+END_EXAMPLE
The equivalent FHiCL would look like:
#+BEGIN_EXAMPLE
wcls_main: {
  // ...
  params: {
    override: '{answer:42, foo:"bar"}'
  }
}
#+END_EXAMPLE
Notes:

1) The value of ~override~ is a string representation of a Jsonnet object. 
2) This resulting ~override~ object is "merge patched" into the hard wired defaults and so one is not restricted to setting only top-level parts of the ~params.jsonnet~ data structure.
3) FHiCL and shell both likely requires overall quoting and both can use ~\'~ or ~\"~ quote escaping if needed.




